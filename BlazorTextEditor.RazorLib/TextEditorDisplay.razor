@using System.Text
@using BlazorTextEditor.RazorLib.Cursor
@using BlazorTextEditor.RazorLib.HelperComponents
@using BlazorTextEditor.RazorLib.Row
@using BlazorTextEditor.RazorLib.Virtualization
@using System.Collections.Immutable

@inherits TextEditorView

<div style="@GlobalFontSizeInPixelsStyling @StyleCssString"
     class="bte_text-editor-css-wrapper @GlobalThemeCssClassString @ClassCssString">

    <TextEditorHeader TextEditorBase="MutableReferenceToTextEditor"
                      TextEditorDisplay="this"
                      HeaderButtonKinds="HeaderButtonKinds"/>

    <div @ref="_textEditorDisplayElementReference"
         @onclick="FocusTextEditorAsync"
         @onkeydown="HandleOnKeyDownAsync"
         @onkeydown:preventDefault="true"
         @oncontextmenu="HandleOnContextMenuAsync"
         @oncontextmenu:preventDefault="true"
         class="bte_text-editor">

        <div class="bte_text-editor-content bte_unselectable"
             id="@TextEditorContentId"
             @onmousedown="HandleContentOnMouseDownAsync"
             @onmousemove="HandleContentOnMouseMoveAsync"
             @ondblclick="HandleContentOnDoubleClickAsync">

            <div class="bte_measure-character-width-and-row-height bte_row"
                 id="@MeasureCharacterWidthAndRowHeightId">

                @for (var i = 0; i < _testStringRepeatCount; i++)
                {
                    <text>
                        @_testStringForMeasurement
                    </text>
                }
            </div>

            @{
                var textEditor = TextEditorStatesSelection.Value;

                if (textEditor is not null)
                {
                    var primaryCursorSnapshot = new TextEditorCursorSnapshot(PrimaryCursor);

                    <div class="bte_text-selection-group">
                        @if (TextEditorSelectionHelper.HasSelectedText(
                            primaryCursorSnapshot.ImmutableCursor.ImmutableTextEditorSelection))
                        {
                            var selectionBounds = TextEditorSelectionHelper
                                .GetSelectionBounds(
                                    primaryCursorSnapshot.ImmutableCursor.ImmutableTextEditorSelection);

                            var firstRowToSelectData =
                                textEditor
                                    .FindRowIndexRowStartRowEndingTupleFromPositionIndex(
                                        selectionBounds.lowerBound);

                            var lastRowToSelectData =
                                textEditor
                                    .FindRowIndexRowStartRowEndingTupleFromPositionIndex(
                                        selectionBounds.upperBound);

                            for (var i = firstRowToSelectData.rowIndex;
                                i <= lastRowToSelectData.rowIndex;
                                i++)
                            {
                                var rowIndex = i;

                                <div class="bte_text-selection"
                                     style="@GetTextSelectionStyleCss(selectionBounds.lowerBound, selectionBounds.upperBound, rowIndex)">
                                </div>
                            }
                        }
                    </div>

                    if (CharacterWidthAndRowHeight is not null &&
                        TextEditorWidthAndHeight is not null)
                    {
                        var tabKeyOutput = "&nbsp;&nbsp;&nbsp;&nbsp;";
                        var spaceKeyOutput = "&nbsp;";

                        if (GlobalShowWhitespace)
                        {
                            tabKeyOutput = "--->";
                            spaceKeyOutput = "·";
                        }

                        <VirtualizationDisplay @ref="_virtualizationDisplay"
                                               EntriesProviderFunc="EntriesProvider"
                                               Context="virtualizedRow">
                            @{
                                var index = virtualizedRow.Index;
                                var row = virtualizedRow.Item;
                            }

                            <div class="bte_gutter"
                                 style="@GetGutterStyleCss(index, virtualizedRow.LeftInPixels)">
                                @(index + 1)
                            </div>

                            <div class="bte_row"
                                 style="@GetRowStyleCss(index, virtualizedRow.LeftInPixels)">
                                @if (row.Any())
                                {
                                    var spanBuilder = new StringBuilder();
                                    var currentDecorationByte = row.First().DecorationByte;

                                    foreach (var richCharacter in row)
                                    {
                                        if (currentDecorationByte == richCharacter.DecorationByte)
                                        {
                                            AppendTextEscaped(
                                                spanBuilder,
                                                richCharacter,
                                                tabKeyOutput,
                                                spaceKeyOutput);
                                        }
                                        else
                                        {
                                            <span class="@GetCssClass(currentDecorationByte)">
                                                @((MarkupString)spanBuilder.ToString())
                                            </span>

                                            spanBuilder.Clear();

                                            AppendTextEscaped(
                                                spanBuilder,
                                                richCharacter,
                                                tabKeyOutput,
                                                spaceKeyOutput);

                                            currentDecorationByte = richCharacter.DecorationByte;
                                        }
                                    }

                                    /* Final grouping of contiguous characters */
                                    <span class="@GetCssClass(currentDecorationByte)">
                                        @((MarkupString)spanBuilder.ToString())
                                    </span>
                                }

                                @if (GlobalShowNewlines &&
                                     index < textEditor.RowCount - 1)
                                {
                                    var amountOfLeftInCharacterWidthUnits =
                                        virtualizedRow.LeftInPixels /
                                        CharacterWidthAndRowHeight.CharacterWidthInPixels;

                                    var lengthOfRow = textEditor
                                        .GetLengthOfRow(
                                            index,
                                            true);

                                    if (amountOfLeftInCharacterWidthUnits < lengthOfRow)
                                    {
                                        var rowEndingTuple = textEditor
                                            .RowEndingPositions[index];

                                        <span class="bte_newline">
                                            @rowEndingTuple.rowEndingKind.AsCharactersHtmlEscaped()
                                        </span>
                                    }
                                }
                            </div>
                        </VirtualizationDisplay>
                    }

                    if (CharacterWidthAndRowHeight is not null)
                    {
                        <TextEditorCursorDisplay @ref="_textEditorCursorDisplay"
                                                 TextEditorCursor="PrimaryCursor"
                                                 CharacterWidthAndRowHeight="CharacterWidthAndRowHeight"
                                                 TextEditor="textEditor"
                                                 ScrollableContainerId="@TextEditorContentId"
                                                 IsFocusTarget="true"
                                                 TabIndex="TabIndex"
                                                 AutoCompleteMenuRenderFragment="AutoCompleteMenuRenderFragment">

                            <OnContextMenuRenderFragment>
                                @if (OnContextMenuRenderFragment is not null)
                                {
                                }
                                else
                                {
                                    @* This is the default context menu *@
                                    <TextEditorContextMenu TextEditor="textEditor"
                                                           TextEditorDisplay="this"/>
                                }
                            </OnContextMenuRenderFragment>
                        </TextEditorCursorDisplay>
                    }
                }
            }
        </div>
    </div>

    <TextEditorFooter TextEditorBase="MutableReferenceToTextEditor"
                      TextEditorDisplay="this"
                      FileExtension="@FileExtension"/>
</div>