@using BlazorTextEditor.RazorLib.Cursor
@using BlazorTextEditor.RazorLib.HelperComponents
@using BlazorTextEditor.RazorLib.TextEditorDisplayInternals
@using BlazorTextEditor.RazorLib.Virtualization

@inherits TextEditorView

<div style="@GlobalFontSizeInPixelsStyling @GetGlobalHeightInPixelsStyling() @StyleCssString"
     class="bte_text-editor-css-wrapper @GlobalThemeCssClassString @ClassCssString">

    <TextEditorHeader TextEditorKey="TextEditorKey"
                      TextEditorDisplay="this"
                      HeaderButtonKinds="HeaderButtonKinds"/>

    <div @ref="_textEditorDisplayElementReference"
         @onclick="FocusTextEditorAsync"
         @onkeydown="HandleOnKeyDownAsync"
         @onkeydown:preventDefault="true"
         @oncontextmenu="HandleOnContextMenuAsync"
         @oncontextmenu:preventDefault="true"
         class="bte_text-editor"
         tabindex="-1">

        <div class="bte_text-editor-content bte_unselectable"
             id="@TextEditorContentId"
             @onmousedown="HandleContentOnMouseDownAsync"
             @onmousemove="HandleContentOnMouseMoveAsync"
             @ondblclick="HandleContentOnDoubleClickAsync"
             @onwheel="HandleOnWheelAsync">

            <MeasureCharacterWidthAndRowHeight @ref="_measureCharacterWidthAndRowHeightComponent"
                                               ElementId="@MeasureCharacterWidthAndRowHeightElementId"/>

            @{
                var textEditor = TextEditorStatesSelection.Value;

                if (textEditor is not null)
                {
                    var primaryCursorSnapshot = new TextEditorCursorSnapshot(PrimaryCursor);

                    if (CharacterWidthAndRowHeight is not null &&
                        WidthAndHeightOfTextEditor is not null)
                    {
                        <TextSelectionGroup TextEditor="textEditor"
                                            PrimaryCursorSnapshot="primaryCursorSnapshot"
                                            CharacterWidthAndRowHeight="CharacterWidthAndRowHeight"/>

                        var tabKeyOutput = "&nbsp;&nbsp;&nbsp;&nbsp;";
                        var spaceKeyOutput = "&nbsp;";

                        if (GlobalShowWhitespace)
                        {
                            tabKeyOutput = "--->";
                            spaceKeyOutput = "·";
                        }

                        <VirtualizationDisplay @ref="_virtualizationDisplay"
                                               EntriesProviderFunc="EntriesProvider"
                                               Context="virtualizationResult">

                            @{
                                // TODO: Tracking the most recently rendered virtualization result feels hacky and needs to be looked into further. The need for this arose when implementing the method "CursorMovePageBottomAsync()"
                                _mostRecentlyRenderedVirtualizationResult = virtualizationResult;
                            }
                            
                            <CascadingValue Value="textEditor">
                                <CascadingValue Value="CharacterWidthAndRowHeight">
                                    <CascadingValue Value="virtualizationResult">
                                        
                                        <GutterSection/>

                                        <RowSection GlobalShowNewlines="GlobalShowNewlines"
                                                    SpaceKeyOutput="@spaceKeyOutput"
                                                    TabKeyOutput="@tabKeyOutput"/>

                                        <ScrollbarSection WidthAndHeightOfTextEditor="WidthAndHeightOfTextEditor"
                                                          TextEditorDisplay="this"/>
                                        
                                    </CascadingValue>
                                </CascadingValue>
                            </CascadingValue>
                        </VirtualizationDisplay>

                        <TextEditorCursorDisplay @ref="_textEditorCursorDisplay"
                                                 TextEditorCursor="PrimaryCursor"
                                                 CharacterWidthAndRowHeight="CharacterWidthAndRowHeight"
                                                 WidthAndHeightOfTextEditor="WidthAndHeightOfTextEditor"
                                                 TextEditorKey="TextEditorKey"
                                                 ScrollableContainerId="@TextEditorContentId"
                                                 IsFocusTarget="true"
                                                 TabIndex="TabIndex"
                                                 GetMostRecentlyRenderedVirtualizationResultFunc="() => _mostRecentlyRenderedVirtualizationResult"
                                                 TextEditorDisplay="this">

                            <OnContextMenuRenderFragment>
                                @if (OnContextMenuRenderFragment is not null)
                                {
                                }
                                else
                                {
                                    @* This is the default context menu *@
                                    <TextEditorContextMenu TextEditor="textEditor"
                                                           TextEditorDisplay="this"/>
                                }
                            </OnContextMenuRenderFragment>
                            <AutoCompleteMenuRenderFragment>
                                @if (AutoCompleteMenuRenderFragment is not null)
                                {
                                }
                                else
                                {
                                    @* This is the default autocomplete menu *@
                                    <TextEditorAutocompleteMenu TextEditorKey="TextEditorKey"
                                                                TextEditorDisplay="this"/>
                                }
                            </AutoCompleteMenuRenderFragment>
                        </TextEditorCursorDisplay>
                    }
                }
            }
        </div>
    </div>

    <TextEditorFooter TextEditorKey="TextEditorKey"
                      TextEditorDisplay="this"
                      FileExtension="@FileExtension"/>
</div>