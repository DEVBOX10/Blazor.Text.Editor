@using System.Text
@using BlazorTextEditor.RazorLib.Cursor
@using BlazorTextEditor.RazorLib.Virtualization
@using BlazorTextEditor.RazorLib.HelperComponents
@using BlazorTextEditor.RazorLib.Row
@using BlazorTextEditor.RazorLib.TextEditor
@using Microsoft.AspNetCore.Components

<div style="@GlobalFontSizeInPixelsStyling @StyleCssString"
     class="@GlobalThemeCssClassString @ClassCssString">

    <div @ref="_textEditorDisplayElementReference"
         @onclick="FocusTextEditorOnClickAsync"
         @onkeydown="HandleOnKeyDownAsync"
         @onkeydown:preventDefault="true"
         @oncontextmenu="HandleOnContextMenuAsync"
         @oncontextmenu:preventDefault="true"
         class="bte_text-editor">

        <div class="bte_text-editor-content bte_unselectable"
             id="@TextEditorContentId"
             @onmousedown="HandleContentOnMouseDownAsync"
             @onmousemove="HandleContentOnMouseMoveAsync">

            <div class="bte_measure-character-width-and-row-height bte_row"
                 id="@MeasureCharacterWidthAndRowHeightId">

                @for (int i = 0; i < _testStringRepeatCount; i++)
                {
                    <text>
                        @_testStringForMeasurement
                    </text>
                }
            </div>
            
            @{
                var safeTextEditorReference = TextEditorStatesSelection.Value;

                var primaryCursorSnapshot = new TextEditorCursorSnapshot(PrimaryCursor);
                
                <div class="bte_text-selection-group">
                    @if (TextEditorSelectionHelper.HasSelectedText(
                            primaryCursorSnapshot.ImmutableCursor.ImmutableTextEditorSelection))
                    {
                        var selectionBounds = TextEditorSelectionHelper
                            .GetSelectionBounds(
                                primaryCursorSnapshot.ImmutableCursor.ImmutableTextEditorSelection);
                        
                        var firstRowToSelectData = 
                            safeTextEditorReference
                                .FindRowIndexRowStartRowEndingTupleFromPositionIndex(
                                    selectionBounds.lowerBound);
                        
                        var lastRowToSelectData = 
                            safeTextEditorReference
                                .FindRowIndexRowStartRowEndingTupleFromPositionIndex(
                                    selectionBounds.upperBound);

                        List<int> rowIndicesToSelect = new();

                        for (int i = firstRowToSelectData.rowIndex;
                             i <= lastRowToSelectData.rowIndex; 
                             i++)
                        {
                            var rowIndex = i;

                            <div class="bte_text-selection"
                                 style="@GetTextSelectionStyleCss(
                                            selectionBounds.lowerBound, 
                                            selectionBounds.upperBound, 
                                            rowIndex)">
                            </div>
                        }
                    }
                </div>

                if (CharacterWidthAndRowHeight is not null &&
                    TextEditorWidthAndHeight is not null)
                {
                    var tabKeyOutput = "&nbsp;&nbsp;&nbsp;&nbsp;";
                    var spaceKeyOutput = "&nbsp;";

                    if (GlobalShowWhitespace)
                    {
                        tabKeyOutput = "--->";
                        spaceKeyOutput = "·";
                    }

                    <VirtualizationDisplay @ref="_virtualizationDisplay" 
                                           EntriesProviderFunc="EntriesProvider"
                                           Context="virtualizedRow">
                        @{
                            var index = virtualizedRow.Index;
                            var row = virtualizedRow.Item;
                        }

                        <div class="bte_gutter"
                             style="@GetGutterStyleCss(index, virtualizedRow.LeftInPixels)">
                            @(index + 1)
                        </div>

                        <div class="bte_row"
                             style="@GetRowStyleCss(index, virtualizedRow.LeftInPixels)">
                            @if (row.Any())
                            {
                                var spanBuilder = new StringBuilder();
                                var currentDecorationByte = row.First().DecorationByte;

                                foreach (var richCharacter in row)
                                {
                                    if (currentDecorationByte == richCharacter.DecorationByte)
                                    {
                                        AppendTextEscaped(
                                            spanBuilder,
                                            richCharacter,
                                            tabKeyOutput,
                                            spaceKeyOutput);
                                    }
                                    else
                                    {
                                        <span class="@GetCssClass(currentDecorationByte)">
                                            @((MarkupString)spanBuilder.ToString())
                                        </span>

                                        spanBuilder.Clear();

                                        AppendTextEscaped(
                                            spanBuilder,
                                            richCharacter,
                                            tabKeyOutput,
                                            spaceKeyOutput);

                                        currentDecorationByte = richCharacter.DecorationByte;
                                    }
                                }

                                /* Final grouping of contiguous characters */
                                <span class="@GetCssClass(currentDecorationByte)">
                                    @((MarkupString)spanBuilder.ToString())
                                </span>
                            }

                            @if (GlobalShowNewlines)
                            {
                                var amountOfLeftInCharacterWidthUnits = 
                                    virtualizedRow.LeftInPixels / 
                                    CharacterWidthAndRowHeight.FontWidthInPixels;

                                var lengthOfRow = safeTextEditorReference
                                    .GetLengthOfRow(
                                        index, 
                                        true);

                                if (amountOfLeftInCharacterWidthUnits < lengthOfRow)
                                {
                                    var rowEndingTuple = safeTextEditorReference
                                        .RowEndingPositions[index];

                                    <span class="bte_newline">
                                        @rowEndingTuple.rowEndingKind.AsCharactersHtmlEscaped()
                                    </span>
                                }
                            }
                        </div>
                    </VirtualizationDisplay>
                }

                if (CharacterWidthAndRowHeight is not null)
                {
                    <TextEditorCursorDisplay @ref="_textEditorCursorDisplay"
                                             TextEditorCursor="PrimaryCursor"
                                             FontWidthAndElementHeight="CharacterWidthAndRowHeight"
                                             TextEditor="safeTextEditorReference"
                                             ScrollableContainerId="@TextEditorContentId"
                                             IsFocusTarget="true"
                                             TabIndex="TabIndex"
                                             OnContextMenuRenderFragment="OnContextMenuRenderFragment"
                                             AutoCompleteMenuRenderFragment="AutoCompleteMenuRenderFragment"/>
                }
            }
        </div>
    </div>
</div>