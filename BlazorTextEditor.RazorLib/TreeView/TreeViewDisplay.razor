@using System.Collections.Immutable

<div class="btv-tree-view">
    @if (!TreeView.IsHidden)
    {
        <div id="@TreeViewService.GetNodeElementId(TreeView)"
             class="btv-tree-view-title @IsActiveCssClass"
             style="padding-left: @(OffsetInPixels)px;"
             tabindex="-1"
             @onclick:stopPropagation="true"
             @onclick="e => ManuallyPropagateOnClick(e, TreeViewState, TreeView)"
             @ondblclick:stopPropagation="true"
             @ondblclick="e => ManuallyPropagateOnDoubleClick(e, TreeViewState, TreeView)"
             @onmousedown:stopPropagation="true"
             @onmousedown="e => HandleTitleOnMouseDown(e, TreeViewState, TreeView)"
             @oncontextmenu:preventDefault="true"
             @oncontextmenu:stopPropagation="true"
             @oncontextmenu="e => ManuallyPropagateOnContextMenu(e, TreeViewState, TreeView)"
             @onkeydown="e => HandleOnKeyDown(e, TreeViewState, TreeView)"
             @ref="_treeViewTitleElementReference">
            
            <div class="btv-tree-view-expansion-chevron"
                 @onclick:stopPropagation="true"
                 @onmousedown:stopPropagation="true"
                 @onmousedown="_ => HandleExpansionChevronOnMouseDown(TreeView)">

                @if (TreeView.IsExpandable)
                {
                    if (TreeView.IsExpanded)
                    {
                        <IconChevronDown/>
                    }
                    else
                    {
                        <IconChevronRight/>
                    }
                }
                else
                {
                    <IconBlank/>
                }
            </div>

            <div class="btv-tree-view-title-content"
                 style="width: calc(100% - @(WidthOfTitleExpansionChevron)px); height:  100%;">
                @{
                    var treeViewRenderer = TreeView
                        .GetTreeViewRenderer();
                }
                <DynamicComponent Type="treeViewRenderer.DynamicComponentType"
                                  Parameters="treeViewRenderer.DynamicComponentParameters"/>
            </div>
        </div>
    }

    @if (TreeView.IsExpanded) {
        <div class="btv-tree-view-children">
            @foreach (var child in TreeView.Children)
            {
                <TreeViewDisplay TreeView="child"
                                 Depth="Depth + 1"/>
            }
        
            @if (!TreeView.IsHidden)
            {
                <div style="margin-left: @(OffsetInPixels + (WidthOfTitleExpansionChevron / 2))px;"
                     class="btv-tree-view-children-border">
                </div>
            }
        </div>
    }
</div>