@using BlazorTextEditor.RazorLib.Cursor
@using BlazorTextEditor.RazorLib.HelperComponents
@using BlazorTextEditor.RazorLib.Keymap
@using BlazorTextEditor.RazorLib.Commands
@using System.Collections.Immutable
@using BlazorCommon.RazorLib.Dimensions
@using BlazorTextEditor.RazorLib.Html
@using BlazorTextEditor.RazorLib.Model
@using BlazorTextEditor.RazorLib.ViewModel
@using BlazorTextEditor.RazorLib.ViewModel.InternalComponents

@{
    var textEditorModel = MutableRefModel;
    var textEditorViewModel = MutableRefViewModel;
    var globalTextEditorOptions = TextEditorService.OptionsWrap.Value.Options;

    string fontFamily;

    if (string.IsNullOrWhiteSpace(globalTextEditorOptions.CommonOptions?.FontFamily))
    {
        fontFamily = "monospace";
    }
    else
    {
        fontFamily = globalTextEditorOptions.CommonOptions.FontFamily;
    }

    var fontFamilyCssStyleString = 
        $"font-family: {fontFamily};"; 
    
    var fontSizeInPixelsCssStyleString = string.Empty;

    if (globalTextEditorOptions.CommonOptions?.FontSizeInPixels is not null)
    {
        fontSizeInPixelsCssStyleString =
            $"font-size: {globalTextEditorOptions.CommonOptions.FontSizeInPixels.Value.ToCssValue()}px;";
    }
}

<div style="@fontSizeInPixelsCssStyleString @fontFamilyCssStyleString @GetGlobalHeightInPixelsStyling() @WrapperStyleCssString"
     class="bte_text-editor-css-wrapper @TextEditorService.ThemeCssClassString @WrapperClassCssString">

    @if (textEditorModel is not null &&
         textEditorViewModel is not null &&
         !globalTextEditorOptions.UseMonospaceOptimizations)
    {
        // All the logic in this if is for debugging while implementing
        // proportional font logic.
        
        <div style="display: flex; position: absolute; visibility: hidden;">
            <div class="bte_psuedo-gutter"
                 style="@GetGutterSectionStyleCss()">
                @(textEditorViewModel.PrimaryCursor.IndexCoordinates.rowIndex + 1)
            </div>
            <div class="bte_psuedo-row"
                 id="@ProportionalFontMeasurementsParentElementId"
                 style="min-height:1ch;">
                
                <span style="display: inline-block;"
                      id="@ProportionalFontMeasurementsTargetElementId">
                </span>
            </div>
        </div>
        
        string GetGutterSectionStyleCss()
        {
            var mostDigitsInARowLineNumber = textEditorModel.RowCount
                .ToString()
                .Length;

            var widthInPixels = mostDigitsInARowLineNumber *
                                textEditorViewModel.VirtualizationResult.CharacterWidthAndRowHeight.CharacterWidthInPixels;

            widthInPixels += TextEditorModel.GUTTER_PADDING_LEFT_IN_PIXELS +
                             TextEditorModel.GUTTER_PADDING_RIGHT_IN_PIXELS;
        
            var widthInPixelsInvariantCulture = widthInPixels.ToCssValue();

            var width = $"width: {widthInPixelsInvariantCulture}px;";

            return width;
        }
    }
    
    <CascadingValue Value="textEditorModel">
        <CascadingValue Value="textEditorViewModel">
            <CascadingValue Value="globalTextEditorOptions">
                <CascadingValue Name="ProportionalFontMeasurementsParentElementId" Value="ProportionalFontMeasurementsParentElementId">
                    <CascadingValue Name="ProportionalFontMeasurementsTargetElementId" Value="ProportionalFontMeasurementsTargetElementId">

                @if (IncludeHeaderHelperComponent &&
                     textEditorModel is not null &&
                     textEditorViewModel is not null)
                {
                    <TextEditorHeader TextEditorViewModelKey="TextEditorViewModelKey"
                                      HeaderButtonKinds="HeaderButtonKinds"/>
                }

                <div @ref="_textEditorDisplayElementReference"
                     @onclick="FocusTextEditorAsync"
                     @onkeydown="HandleOnKeyDownAsync"
                     @onkeydown:preventDefault="true"
                     @oncontextmenu="HandleOnContextMenuAsync"
                     @oncontextmenu:preventDefault="true"
                     @onmousedown="HandleContentOnMouseDownAsync"
                     @onmousemove="HandleContentOnMouseMoveAsync"
                     @ondblclick="HandleContentOnDoubleClickAsync"
                     @onwheel="HandleOnWheelAsync"
                     @ontouchstart="HandleOnTouchStartAsync"
                     @ontouchmove="HandleOnTouchMoveAsync"
                     @ontouchend="ClearTouchAsync"
                     @ontouchcancel="ClearTouchAsync"
                     @ontouchleave="ClearTouchAsync"
                     id="@ContentElementId"
                     style="@TextEditorStyleCssString"
                     class="bte_text-editor bcrl_unselectable @TextEditorClassCssString"
                     tabindex="-1">
                    
                    <MeasureCharacterWidthAndRowHeight @ref="MeasureCharacterWidthAndRowHeightComponent"
                                                       HtmlElementId="@MeasureCharacterWidthAndRowHeightElementId"/>
    
                    @if (textEditorModel is not null &&
                         textEditorViewModel is not null)
                    {
                        <GutterSection/>
                        
                        <BodySection @ref="_bodySection"
                                     TabIndex="TabIndex"
                                     ContextMenuRenderFragmentOverride="ContextMenuRenderFragmentOverride"
                                     IncludeContextMenuHelperComponent="IncludeContextMenuHelperComponent"
                                     AutoCompleteMenuRenderFragmentOverride="AutoCompleteMenuRenderFragmentOverride"/>
                        
                        if (textEditorViewModel.DisplayCommandBar)
                        {
                            <CommandBarDisplay RestoreFocusToTextEditor="FocusTextEditorAsync"/>
                        }
                    }
                    else
                    {
                        if (textEditorModel is null)
                        {
                            <div>The @nameof(TextEditorModel) was null</div>
                        }
                        else if (textEditorViewModel is null)
                        {
                            <div>The @nameof(TextEditorViewModel) was null</div>
                        }
                    }
                </div>

                @if (IncludeFooterHelperComponent &&
                     textEditorModel is not null &&
                     textEditorViewModel is not null)
                {
                    <TextEditorFooter TextEditorViewModelKey="TextEditorViewModelKey"/>
                }
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</div>